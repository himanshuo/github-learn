Bash Basic Syntax
============

#!/bin/bash
	To let linux know that you are running a bash script

X="hi"
X=hi
X="hi adsf"
	create variables
	Common errors are:
		X = "hi"
			no space between X and =
		X=hi adsf
			no space in string unless you have proper quotations

echo "$X"
	uses X in echo command

"" versus ''
	"" actually uses the variables defined inside
		echo "$X is my name" # Himanshu is my name
	'' is raw string
		echo '$X is my name' # $X is my name

$X versus "$X"  
	assume X=""
	$X evaluates to nothing
	"$X" evaulates to "" (the empty string)
	thus if you do something like
		if [-n $X]; then 
			echo "hi"
		fi
		where -n tests to see if the argument is non-empty
		then you will NOT echo hi!!!
		why? because $X evaluates to nothing in this case. Thus -n is not passed any argument. its like doing if [-n];...

	Thus, you should do something like
		if [-n "$X"]; then ...

	The point is: whenever you are trying to evaluate a variable, use double quotes.

	Okay, it is WEIRD that if [-n $X] evaulates to if [-n ]. Think about it though:
		LS="ls"
		LS_FLAGS="-al"

		$LS $LS_FLAGS $HOME 
			would evaluate to
				ls -al /home/himanshu 
			in the terminal. 

		the above is the SAME idea

${X}abc
	$Xabc would think the variable you are looking for is Xabc. You are really looking for X so use brackets

if condition1
then
	statement1
	statement2
	..........
elif condition2
then
	statement3
	statement4
	........    
elif condition3
then
	statement5
	statement6
	........    
else
	statement7
fi

test command
	
[] can be used in place of test
	if test $X -lt $Y
	is equivilent to 
	if [ $X -lt $Y ]

common bugs
	no spaces between [ and variable in
		if [ $X -lt $Y ]
	not using a semicolon or atleast putting then on the next line
		if [ $X -lt $Y ]; then 
		OR
		if [ $X -lt $Y ]
		then
	forgetting fi 
		if ... ; then
			...
		fi

	A correct working if then statement is:
		if [ $X -lt $Y ]; then
			echo "hi"
		fi



common test commands
	[ -n $mystr ]  # mystr has non-zero length
	[ -z $mystr ]  # mystr has zero length
	
	[ -d $mystr ]  # there exists a directory whose name is mystr
	[ -f $mystr ]  # there exists a file whose name is mystr
	
	# integers
	[ $X -eq $Y ]  # x = y (x and y are both integers)
	[ $X -neq $Y ]  # x != y
	[ $X -lt $Y ]   # x < y
	[ $X -le $Y ]   # x <= y
	[ $X -gt $Y ]  # x > y
	[ $X -ge $Y ]   # x >= y


	# strings
	[ $X = $Y ]  # x equals y as a string
	[ $X != $Y ]  # x does not equal y as a string


	
for loops
	for X in red green blue
	do
		echo $X
	done

	if for loops have spaces, then you need to protect them
	color1="red"
	color2="light green"
	color3="darkish blue"
	for X in "$color1" "$color2" "$color3"
		echo "$X"
	done
		prints: 
			red
			light green
			darkish blue

	without "" then you would have a different list
	for X in $color1 $color2 $color3
	...
		prints:
			red
			light
			green
			darkish
			blue

	{START..END..INCREMENT} syntax:
		for i in {1...5...2}
		do
			echo "$X"
		done
		prints
			1
			3


globbing
	using wildcard character * creates a list of all files/folders that match with the wildcard
		echo * # lists all file and folder in cur dir
		echo *.jpg
		exho ${HOME}/public/*.jpg # lists all jpg files in home/himanshu/public dir
	The key use is for doing things on all specific type of files in a given dir
		for X in *.html
		do
			grep -L '<UL>' "$X"
		done

while loops
	X=0
	while [ $X -lt 0 ]
	do
		...
		X=$((X+1))
	done



command substitution
	brace expansion
		$(commands) expands the output of commands. This allows for nesting so commands can include brace expansions as well
	backtick expansion
		`commands` expands the output of commands. This DOES NOT allow for nesting. Probably should just use $() then

	Example
		files="$(ls)"
		other_files=`ls /some/dir`
		x=$(expr 3\* 2 + 4)
